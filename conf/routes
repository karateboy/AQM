# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

GET		/login						controllers.Login.prompt
GET		/logout						controllers.Login.logout
POST	/authenticate				controllers.Login.authenticate

GET		/monitorMonthlyHourReport/:monitor/:monitorType/:startDate	controllers.Report.monthlyHourReport(monitor, monitorType, startDate, outputTypeStr="html")
GET		/PDF/monitorMonthlyHourReport/:monitor/:monitorType/:startDate	controllers.Report.monthlyHourReport(monitor, monitorType, startDate, outputTypeStr="pdf")

GET		/realtimeStatus				controllers.Realtime.realtimeStat(outputTypeStr = "html")
GET		/PDF/realtimeStatus			controllers.Realtime.realtimeStat(outputTypeStr = "pdf")
GET		/realtimeImage				controllers.Realtime.realtimeImg
GET		/realtimeTrend				controllers.Realtime.realtimeTrend
GET		/JSON/realtime/map			controllers.Realtime.realtimeMap
POST	/JSON/realtimeTrend			controllers.Realtime.realtimeTrendJSON
GET 	/JSON/realtimeHighchart/:monitorType controllers.Realtime.highchartJson(monitorType)	

GET		/report/*reportType			controllers.Report.getReport(reportType)
GET		/monitorReport/:reportType/:monitor/:startDate	controllers.Report.monitorReport(monitor, reportType, startDate, outputTypeStr="html")
GET		/PDF/monitorReport/:reportType/:monitor/:startDate	controllers.Report.monitorReport(monitor, reportType, startDate, outputTypeStr="pdf")
GET		/Excel/monitorReport/:reportType/:monitor/:startDate	controllers.Report.monitorReport(monitor, reportType, startDate, outputTypeStr="excel")

GET		/PsiQuery					controllers.Report.psiReportPrompt
GET		/PsiQueryReport/:monitor/:reportType/:start	controllers.Report.psiReportReport(monitor, reportType, start, outputTypeStr="html")
GET		/PDF/PsiQueryReport/:monitor/:reportType/:start	controllers.Report.psiReportReport(monitor, reportType, start, outputTypeStr="pdf")

GET		/EffectiveQuery			controllers.Report.effectiveQuery
GET		/EffectiveAnnualReport/:reportType/:start/:param	controllers.Report.effectiveAnnualReport(reportType, start, param, outputTypeStr="html")
GET		/PDF/EffectiveAnnualReport/:reportType/:start/:param	controllers.Report.effectiveAnnualReport(reportType, start, param, outputTypeStr="pdf")

GET		/HistoryQuery			controllers.Query.history
GET		/HistoryQueryReport/:edit/:monitor/:monitorType/:recordType/:start/:end	controllers.Query.historyReport(edit:Boolean, monitor, monitorType, recordType, start, end, outputType="html")
GET		/PDF/HistoryQueryReport/:edit/:monitor/:monitorType/:recordType/:start/:end	controllers.Query.historyReport(edit:Boolean, monitor, monitorType, recordType, start, end, outputType="pdf")

GET		/HistoryTrend			controllers.Query.historyTrend
GET		/JSON/HistoryTrend/:monitor/:monitorType/:reportUnit/:msf/:start/:end	controllers.Query.historyTrendChart(monitor, monitorType, reportUnit, msf, start, end)
GET		/PsiTrend				controllers.Query.psiTrend
GET		/JSON/PsiTrend/:monitor/:start/:end	controllers.Query.psiTrendChart(monitor, start, end)

GET		/OverLawStd				controllers.Query.overLawStd
GET		/OverLawStdReport/:monitor/:monitorType/:start/:end	controllers.Query.overLawStdReport(monitor, monitorType, start, end, outputTypeStr="html")
GET		/PDF/OverLawStdReport/:monitor/:monitorType/:start/:end	controllers.Query.overLawStdReport(monitor, monitorType, start, end, outputTypeStr="pdf")

GET		/EffectivePercentage	controllers.Query.effectivePercentage
GET		/EffectivePercentage/:start/:end	controllers.Query.effectivePercentageReport(start, end, outputTypeStr="html")
GET		/PDF/EffectivePercentage/:start/:end	controllers.Query.effectivePercentageReport(start, end, outputTypeStr="pdf")

GET		/Alarm					controllers.Query.alarm
GET		/AlarmReport/:monitor/:status/:start/:end	controllers.Query.alarmReport(monitor, status, start, end, outputTypeStr="html")
GET		/PDF/AlarmReport/:monitor/:status/:start/:end	controllers.Query.alarmReport(monitor, status, start, end, outputTypeStr="pdf")

GET		/WindRose				controllers.Query.windRose
GET		/WindRoseReport/:monitor/:start/:end	controllers.Query.windRoseReport(monitor, start, end)
GET		/CompareLastYear		controllers.Query.compareLastYear
GET		/JSON/CompareLastYearChart/:monitor/:monitorType/:start/:end	controllers.Query.compareLastYearChart(monitor, monitorType, start, end)
GET		/CalculateStat			controllers.Query.calculateStat
GET		/CalculateStatReport/:monitor/:monitorType/:start/:end	controllers.Query.calculateStatReport(monitor, monitorType, start, end, outputTypeStr="html")
GET		/PDF/CalculateStatReport/:monitor/:monitorType/:start/:end	controllers.Query.calculateStatReport(monitor, monitorType, start, end, outputTypeStr="pdf")

GET		/Regression				controllers.Query.regression
GET		/JSON/RegressionChart/:monitor/:monitorType/:start/:end	controllers.Query.regressionChart(monitor, monitorType, start, end)

GET		/CalibrationQuery			controllers.Query.calibrationQuery
GET		/CalibrationQueryReport/:monitor/:start/:end controllers.Query.calibrationQueryReport(monitor, start, end, outputTypeStr="html")
GET		/PDF/CalibrationQueryReport/:monitor/:start/:end controllers.Query.calibrationQueryReport(monitor, start, end, outputTypeStr="pdf")

GET		/Monitor					controllers.Application.monitor(monitor = "A001")
GET		/Monitor/:monitor			controllers.Application.monitor(monitor)
GET		/MonitorTypes/:monitor	controllers.Application.getMonitorTypes(monitor)
POST	/MonitorTypes/:monitor	controllers.Application.setMonitorTypes(monitor)
GET		/MonitorTypeConfig			controllers.Application.monitorTypeConfig
GET 	/RecordValidation			controllers.Application.recordValidation
GET		/HTML/RecordValidation/:start	controllers.Application.recordValidationHtml(start)
GET		/RealtimeEpaRecord			controllers.Application.realtimeEpaRecord

GET		/UserManagement		controllers.Application.userManagement
PUT		/User				controllers.Application.newUser
GET		/User				controllers.Application.getAllUsers
POST	/User/:id			controllers.Application.updateUser(id:Int)
GET		/User/:id			controllers.Application.getUser(id:Int)
DELETE  /User/:id			controllers.Application.deleteUser(id:Int)	

GET		/GroupManagement	controllers.Application.groupManagement
PUT		/Group				controllers.Application.newGroup
GET		/Group				controllers.Application.getAllGroups
POST	/Group/:id			controllers.Application.updateGroup(id: Int)
DELETE	/Group/:id			controllers.Application.deleteGroup(id: Int)

GET		/ManualAudit		controllers.Application.manualAudit
POST	/ManualAudit		controllers.Application.manualAuditApply

GET		/AuditConfig			controllers.Application.auditConfig
GET		/AuditConfig/:monitor	controllers.Application.getMonitorAuditConfig(monitor)
POST	/AuditConfig/:monitor	controllers.Application.setMonitorAuditConfig(monitor)

GET		/AuditedQuery		controllers.Query.auditedQuery
GET		/AuditedQueryReport/:monitor/:monitorType/:recordType/:start/:end	controllers.Query.auditedReport(monitor, monitorType, recordType, start, end, outputType="html")
GET		/PDF/AuditedQueryReport/:monitor/:monitorType/:recordType/:start/:end	controllers.Query.auditedReport(monitor, monitorType, recordType, start, end, outputType="pdf")

GET		/Instrument			controllers.Application.instrument
GET		/InstrumentReport/:monitor/:instrument/:start/:end controllers.Application.instrumentReport(monitor, instrument, start, end, outputTypeStr="html")
GET		/PDF/InstrumentReport/:monitor/:instrument/:start/:end controllers.Application.instrumentReport(monitor, instrument, start, end, outputTypeStr="pdf")